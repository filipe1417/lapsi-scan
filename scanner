#!/usr/bin/bash

###############################################################
#
#
#Versão 1.0 - Arquivo inicial do script                      
#Versão 1.1 - Separação por funções e opção de scan completo							      
#Versão 1.2 - Introdução do menu de ataques, já com arp poisoning				
#Versão 1.3 - Repaginada na aparência e resolução de bugs
#Versão 1.4 - Checagem de dependências ao iniciar script
#
###############################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'
BLUE='\033[0;34m'

VM='\033[0;31m'
VR='\033[0;32m'
AZ='\033[0;34m'
SET="\033[31;5mX----X\033[0m"
PISCA="\033[5m"
PARA_PISCA="\33[0m"

IMAGEM_LAPSI="
 _        _    ____  ____ ___
| |      / \  |  _ \/ ___|_ _|
| |     / _ \ | |_) \___ \| | 
| |___ / ___ \|  __/ ___) | | 
|_____/_/   \_\_|   |____/___|
"

IMAGEM_SCAN="
${AZ}
 ___________    ___________    ___________
|-----------|  |-----------|  |-----------|
|           |  |           |  |           |
|___________|  |___________|  |___________|                  
|_________oo|  |_________oo|  |_________oo|                  
      |              |              |
 _____|_____    _____|_____    _____|_____ 
${NC}                                     
      ${VR} ${PISCA} \            |            /  
         \           |           /
          \       ${VM} _____${VR}${PISCA}        /
           \      ${VM}/     \ ${VR}${PISCA}     /
            \    ${VM}| () () |${VR}${PISCA}    /
                  ${VM}\  ^  /${VR}
                   ${VM}|||||${VR} ${NC}
"

ESC=$(printf '\033') RESET="${ESC}[0m" RED="${ESC}[31m"
GREEN="${ESC}[32m" YELLOW="${ESC}[33m" BLUE="${ESC}[34m" MAGENTA="${ESC}[35m" WHITE="${ESC}[37m" DEFAULT="${ESC}[39m"

greenprint() { printf "${GREEN}%s${RESET}" "$1"; }
blueprint() { printf "${BLUE}%s${RESET}\n" "$1"; }
redprint() { printf "${RED}%s${RESET}\n" "$1"; }
yellowprint() { printf "${YELLOW}%s${RESET}" "$1"; }
magentaprint() { printf "${MAGENTA}%s${RESET}\n" "$1"; }

ARMAZENAMENTO=$(mktemp IPs.XXXXX)

#variavel global para retornar linha do IPs.XXXXX
LINHA=""

trap 'rm $ARMAZENAMENTO' EXIT

VERSAO=$(\
    grep "^#Versão" $0 \
    | tail -1 \
    | cut -d "-" -f 1 \
    | cut -d " " -f 2 \
)

MENSAGEM_MENU_INICIAL="
$IMAGEM_LAPSI
$(greenprint "##########  TELA INICIAL  ##########")
$(greenprint "Versão atual: $VERSAO")
$(greenprint "Nota: Algumas funcionalidades podem demandar privilegios de superusuário\nNesses casos, será indicado com 'sudo' ao lado da opção.")

Para utilizar a ferramenta, escolha uma das seguintes opções:
$(yellowprint "1.") $(blueprint "Scan completo em toda rede - Inclui port scan") $(magentaprint "(sudo)")
$(yellowprint "2.") $(blueprint "Port scan em portas específicas")
$(yellowprint "3.") $(blueprint "Ping sweep em toda subrede")
$(yellowprint "4.") $(blueprint "Menu de ataques")
$(yellowprint "5.") $(redprint "Sair do programa")
"

MENSAGEM_MENU_ATAQUES="
$IMAGEM_LAPSI
$(greenprint "##########  LISTA DE ATAQUES  ##########")
$(redprint "A UTILIZAÇÃO DE ATAQUES DEVE SER FEITA DE FORMA CONTROLADA. UTILIZE EM AMBIENTES PERMITIDOS.\nNÃO NOS RESPONSABILIZAMOS POR POSSÍVEIS DANOS CAUSADOS.")


$(yellowprint "1.") $(blueprint "ARP poisoning/spoofing - Negação de serviço") $(magentaprint "(sudo)")
$(yellowprint "2.") $(blueprint "ARP poisoning/spoofing - Interceptação") $(magentaprint "(sudo)")
$(yellowprint "3.") $(blueprint "Voltar")
$(yellowprint "4.") $(redprint "Sair do programa")
"

LISTA_DEPENDENCIAS=("nmap" "fping" "python3" "scapy")
FALTA_DEPENDENCIAS=0

checa_dependencias(){
    for i in "${LISTA_DEPENDENCIAS[@]}"
    do
        if [[ $(which $i 2>&1 | grep "/$i") ]]; then
            continue
        else
            if [[ $FALTA_DEPENDENCIAS -eq "0" ]]
            then
                FALTA_DEPENDENCIAS="1"
                PROGRAMAS_PARA_INSTALAR=()
            fi
            echo -e "${RED}${BLUE}Dependência ${RED}$i${BLUE} não instalada${NC}"
            PROGRAMAS_PARA_INSTALAR+=("$i")
            
        fi
    done
    if [[ $FALTA_DEPENDENCIAS -eq "1" ]]
    then
        echo -e "Com dependências não instaladas, o script não funcionará como deveria.\n"
        echo -e "Digite 1 para que a instalação seja feita automaticamente
Digite 2 para acessar o script mesmo assim ${RED}(não recomendado)${NC}
Digite 2 para sair"
        read -r escolha
        case $escolha in
            1)
                sudo apt install -y $(echo ${PROGRAMAS_PARA_INSTALAR[@]})
            ;;
            2)
                break
            ;;
            3)
                exit 1
            ;;
        esac
    fi
}

get_IP() {
	i=0
	while read LINHA; do
		i=$(( i + 1 ))
		case $i in $2) echo "$LINHA"; break;; esac
	done <"$1"
}

txt_file_use() {
		if [[ $2 =~ ^[+-]?[0-9]+$ ]]; then
	                IP=$(get_IP $1 $2)
                else
	                IP=$2
			if grep -q "$2" $1
		                then
			                :
		                else
		                echo $2 >> $1
			fi
                fi
		echo "$IP"

}

checa_sudo(){
    if [ "$EUID" -ne 0 ]
    then 
        echo "Para utilizar essa função, inicie o script utilizando 'sudo'"
        exit
    fi
}

print_imagem_mitm() {

if [ $1 -eq 0 ]
then
    SETAS="\033[31;5mX----X\033[0m"
else
    SETAS="\033[33;5m<---->\033[0m"
fi
echo -e "

  ${GREEN}$IP_ALVO_1                              ${GREEN}$IP_ALVO_2
${GREEN}___________________                         ___________________
 | _______________ |                         | _______________ |
 | |XXXXXXXXXXXXX| |                         | |XXXXXXXXXXXXX| |
 | |XXXXXXXXXXXXX| |        ${BLUE}   ___${NC}${GREEN}           | |XXXXXXXXXXXXX| |
 | |XXXXXXXXXXXXX| |       ${BLUE}  /     \ ${NC}${GREEN}        | |XXXXXXXXXXXXX| |
 | |XXXXXXXXXXXXX| |  $SETAS ${BLUE}|() ()|${NC} $SETAS ${GREEN} | |XXXXXXXXXXXXX| | 
 | |XXXXXXXXXXXXX| |       ${BLUE}  \  ^  /${NC}${GREEN}         | |XXXXXXXXXXXXX| |
 |_________________|        ${BLUE}  |||||${NC}${GREEN}          |_________________|
     _[_______]                                 ${GREEN} _[_______]
 ___[___________]___                         ___[___________]___
|         [_____] []|                       |         [_____] []|
|         [_____] []|                       |         [_____] []|
L___________________J                       L___________________J${NC}

"
}

port_scan() {
    echo "portscan"
}


ping_sweep() {
    echo "pingsweep"
}

leitura_entrada(){
    read -r -e -d $'\n' -p '> ' $1
}

arp_poison(){
    checa_sudo
    ARQUIVO_IP_FORWARD="/proc/sys/net/ipv4/ip_forward"
    ESTADO_ANTERIOR=$(cat $ARQUIVO_IP_FORWARD)
    echo $1 > $ARQUIVO_IP_FORWARD
    nl $ARMAZENAMENTO
    echo -e "Digite o endereço IP do primeiro alvo"
    leitura_entrada opcao1
    echo -e "Digite o endereço IP do segundo alvo"
    leitura_entrada opcao2

    IP_ALVO_1=$(txt_file_use $ARMAZENAMENTO $opcao1)
    IP_ALVO_2=$(txt_file_use $ARMAZENAMENTO $opcao2)
    print_imagem_mitm "$1" "$IP_ALVO_1" "$IP_ALVO_2"
    python3 auxiliares/ataques/arpPoison.py $IP_ALVO_1 $IP_ALVO_2
    echo "$ESTADO_ANTERIOR" > $ARQUIVO_IP_FORWARD
}

scan_completo() {
    clear
    tmpfile=$(mktemp /tmp/ips.XXXXXX)
    # trabalhando com file descriptors para que em caso de crash o arquivo temporário ja vai ter sido apagado e o file descript é apagado também ao fechar o shell
    exec 3> "$tmpfile" # escrita - file descriptor 3
    exec 4< "$tmpfile" # leitura - file descriptor 4
    rm "$tmpfile"

    echo -e "$IMAGEM_SCAN"
    fping -g -s -a -i 1 -r 1 $1 >&3 2> /dev/null #ping sweep

    nmap -Pn -sC -sV -O $(cat <&4) #port scan


    exec 3>&- # fechar o file descriptor
}

menu_ataques(){
    clear
    unset opcao
    echo -e "$MENSAGEM_MENU_ATAQUES"
    leitura_entrada opcao

    case $opcao in
        '1' | '2' )
            #parece ser equivalente a fazer um fallthrough no case onde a unica opção que muda é a de ativar ou desativar o ip forwarding
            arp_poison "$(($opcao-1))" #nesse caso, opção 1 vai ser igual a escrever 0 no arquivo de ip forward (bloquear passagem) e opção 2 vai ser 1 no arquivo (permitir passagem)
        ;;
        '3')
            menu_inicial
        ;;
        '4')
            exit 0
        ;;
        *)
            echo "Opção inválida"
        ;;
    esac
}

menu_inicial(){
    clear
    unset opcao
    echo -e "$MENSAGEM_MENU_INICIAL"	
    #read -r opcao
    leitura_entrada opcao
    #while IFS="" read -r -e -d $'\n' -p '> ' opcao; do 
    #    echo "$opcao"
    #    history -s "$opcao"
    #done
    case $opcao in
        '1')
            nl $ARMAZENAMENTO
            checa_sudo
            echo -e "Digite o endereço da subrede no formato CIDR
Exemplo: 192.168.1.0/24\n"
            leitura_entrada opcao
            IP_local=$(txt_file_use $ARMAZENAMENTO $opcao)
            scan_completo "$IP_local"
        ;;
        '2')
            nl $ARMAZENAMENTO
            echo "Digite o IP alvo"
            leitura_entrada opcao
            echo "Digite a porta a ser analisada"
            leitura_entrada porta
            IP_local=$(txt_file_use $ARMAZENAMENTO $opcao)
            resultado=$(nmap $IP_local -p $porta | grep -v Nmap)
            if [[ $resultado == *"Host seems down"* ]];then
              echo -e "$(redprint "O host não parece estar ativo")"
            else
              echo "$resultado"
            fi
        ;;
        '3')
            nl $ARMAZENAMENTO
            echo "Digite a subrede no formato 10.0.0.0/24"
            leitura_entrada opcao
	        IP_local=$(txt_file_use $ARMAZENAMENTO $opcao)
            echo "O ping sweep está sendo realizado..."
            echo -e "Os seguintes hosts estão ativos:\n"
            fping -g -s -a -i 1 -r 1 $IP_local 2> /dev/null
        ;;
        '4')
            menu_ataques
        ;;
        '5')
            exit 0
        ;;
        *)
            echo "Opção inválida"
        ;;
    esac
    printf "%s " "Pressione Enter para continuar"
    read ans
}

main() { 
    checa_dependencias
    while true; do
        menu_inicial        
    done
}

main "$@"
