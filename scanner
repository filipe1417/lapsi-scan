#!/usr/bin/bash

###############################################################
#   TO-DO
#	
#	*. Mais opções e integrar outras ferramentas						     
#	*. Salvar IP em algum lugar para reutilização - quando se quer utilizar vários scans para o mesmo IP, não deveria precisar ficar digitando novamente 						      
#	*. Salvar em arquivos os scans		
#   *. Separar o scan completo em funções diferentes
#	*. Separar print de textos e leitura de valores digitados da ação da função (não deixar dentro uma função que realiza um ataque, por exemplo, prints de algum texto)    
#   *. Salvar no histórico o scan anterior
#Versão 1.0 - Arquivo inicial do script                      
#Versão 1.1 - Separação por funções e opção de scan completo							      
#Versão 1.2 - Introdução do menu de ataques, já com arp poisoning						      
###############################################################
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'
BLUE='\033[0;34m'

IMAGEM_LAPSI="
 _        _    ____  ____ ___
| |      / \  |  _ \/ ___|_ _|
| |     / _ \ | |_) \___ \| | 
| |___ / ___ \|  __/ ___) | | 
|_____/_/   \_\_|   |____/___|
"

print_imagem_mitm() {

if [ $1 -eq 0 ]
then
    SETAS="\033[31;5mX----X\033[0m"
else
    SETAS="\033[33;5m<---->\033[0m"
fi
echo -e "

  ${GREEN}$IP_ALVO_1                              ${GREEN}$IP_ALVO_2
${GREEN}___________________                         ___________________
 | _______________ |                         | _______________ |
 | |XXXXXXXXXXXXX| |                         | |XXXXXXXXXXXXX| |
 | |XXXXXXXXXXXXX| |        ${BLUE}   ___${NC}${GREEN}           | |XXXXXXXXXXXXX| |
 | |XXXXXXXXXXXXX| |       ${BLUE}  /     \ ${NC}${GREEN}        | |XXXXXXXXXXXXX| |
 | |XXXXXXXXXXXXX| |  $SETAS ${BLUE}|() ()|${NC} $SETAS ${GREEN} | |XXXXXXXXXXXXX| | 
 | |XXXXXXXXXXXXX| |       ${BLUE}  \  ^  /${NC}${GREEN}         | |XXXXXXXXXXXXX| |
 |_________________|        ${BLUE}  |||||${NC}${GREEN}          |_________________|
     _[_______]                                 ${GREEN} _[_______]
 ___[___________]___                         ___[___________]___
|         [_____] []|                       |         [_____] []|
|         [_____] []|                       |         [_____] []|
L___________________J                       L___________________J${NC}

"

}


ESC=$(printf '\033') RESET="${ESC}[0m" RED="${ESC}[31m"
GREEN="${ESC}[32m" YELLOW="${ESC}[33m" BLUE="${ESC}[34m" MAGENTA="${ESC}[35m" WHITE="${ESC}[37m" DEFAULT="${ESC}[39m"

greenprint() { printf "${GREEN}%s${RESET}" "$1"; }
blueprint() { printf "${BLUE}%s${RESET}\n" "$1"; }
redprint() { printf "${RED}%s${RESET}\n" "$1"; }
yellowprint() { printf "${YELLOW}%s${RESET}" "$1"; }
magentaprint() { printf "${MAGENTA}%s${RESET}\n" "$1"; }

VERSAO=$(\
    grep "^#Versão" $0 \
    | tail -1 \
    | cut -d "-" -f 1 \
    | cut -d " " -f 2 \
)

MENSAGEM_MENU_INICIAL="
$IMAGEM_LAPSI
$(greenprint "##########  TELA INICIAL  ##########")
$(greenprint "Versão atual: $VERSAO")
$(greenprint "Nota: Algumas funcionalidades podem demandar privilegios de superusuário\nNesses casos, será indicado com 'sudo' ao lado da opção.")

Para utilizar a ferramenta, escolha uma das seguintes opções:
$(yellowprint "1.") $(blueprint "Scan completo em toda rede - Inclui port scan")
$(yellowprint "2.") $(blueprint "Port scan em portas específicas")
$(yellowprint "3.") $(blueprint "Ping sweep em toda subrede")
$(yellowprint "4.") $(blueprint "Menu de ataques")
$(yellowprint "5.") $(redprint "Sair do programa")
"

MENSAGEM_MENU_ATAQUES="
$IMAGEM_LAPSI
$(greenprint "##########  LISTA DE ATAQUES  ##########")
$(redprint "A UTILIZAÇÃO DE ATAQUES DEVE SER FEITA DE FORMA CONTROLADA. UTILIZE EM AMBIENTES PERMITIDOS.\nNÃO NOS RESPONSABILIZAMOS POR POSSÍVEIS DANOS CAUSADOS.")


$(yellowprint "1.") $(blueprint "ARP poisoning/spoofing - Negação de serviço") $(magentaprint "(sudo)")
$(yellowprint "2.") $(blueprint "ARP poisoning/spoofing - Interceptação") $(magentaprint "(sudo)")
$(yellowprint "3.") $(blueprint "Voltar")
$(yellowprint "4.") $(redprint "Sair do programa")
"


checa_sudo(){
    if [ "$EUID" -ne 0 ]
    then 
        echo "Para utilizar essa função, inicie o script utilizando 'sudo'"
        exit
    fi
}

port_scan() {
    echo "portscan"
}


ping_sweep() {
    echo "pingsweep"
}

arp_poison(){
    #Depois separar os echos e reads da ação em si
    checa_sudo
    ARQUIVO_IP_FORWARD="/proc/sys/net/ipv4/ip_forward"
    ESTADO_ANTERIOR=$(cat $ARQUIVO_IP_FORWARD)
    echo $1 > $ARQUIVO_IP_FORWARD
    echo -e "Digite o endereço IP do primeiro alvo"
    read -r IP_ALVO_1
    echo -e "Digite o endereço IP do segundo alvo"
    read -r IP_ALVO_2
    print_imagem_mitm "$1" "$IP_ALVO_1" "$IP_ALVO_2"
    python3 auxiliares/ataques/arpPoison.py $IP_ALVO_1 $IP_ALVO_2
    echo "$ESTADO_ANTERIOR" > $ARQUIVO_IP_FORWARD
}

scan_completo() {
    tmpfile=$(mktemp /tmp/ips.XXXXXX)
    # trabalhando com file descriptors para que em caso de crash o arquivo temporário ja vai ter sido apagado e o file descript é apagado também ao fechar o shell
    exec 3> "$tmpfile" # escrita - file descriptor 3
    exec 4< "$tmpfile" # leitura - file descriptor 4
    rm "$tmpfile"

    fping -g -s -a -i 1 -r 1 $1 >&3 2> /dev/null #ping sweep

    nmap -Pn $(cat <&4) #port scan

    exec 3>&- # fechar o file descriptor
}

menu_ataques(){
    clear
    unset opcao
    echo -e "$MENSAGEM_MENU_ATAQUES"
    read -r opcao

    case $opcao in
        '1' | '2' )
            #parece ser equivalente a fazer um fallthrough no case onde a unica opção que muda é a de ativar ou desativar o ip forwarding
            arp_poison "$(($opcao-1))" #nesse caso, opção 1 vai ser igual a escrever 0 no arquivo de ip forward (bloquear passagem) e opção 2 vai ser 1 no arquivo (permitir passagem)
        ;;
        '3')
            menu_inicial
        ;;
        '4')
            exit 0
        ;;
        *)
            echo "Opção inválida"
        ;;
    esac
}

menu_inicial(){
    clear
    unset opcao
    echo -e "$MENSAGEM_MENU_INICIAL"	
    read -r opcao
    case $opcao in
        '1')
            echo -e "Digite o endereço da subrede no formato CIDR
Exemplo: 192.168.1.0/24\n"
            read -r IP
            scan_completo "$IP"
        ;;
        '2')
            echo "Digite o IP alvo"
            read -r IP
            echo "Digite a porta a ser analisada"
            read -r porta
            resultado=$(nmap $IP -p $porta | grep -v Nmap)
            if [[ $resultado == *"Host seems down"* ]];then
              echo -e "$(redprint "O host não parece estar ativo")"
            else
              echo "$resultado"
            fi
        ;;
        '3')
            echo "Digite a subrede no formato 10.0.0.0/24"
            read -r IP
            echo "O ping sweep está sendo realizado..."
            echo -e "Os seguintes hosts estão ativos:\n"
            #nmap -sP $IP | grep "report" | cut -d " " -f5-
            fping -g -s -a -i 1 -r 1 $IP 2> /dev/null
        ;;
        '4')
            menu_ataques
        ;;
        '5')
            #clear
            exit 0
        ;;
        *)
            echo "Opção inválida"
        ;;
    esac
    #echo -e "\nDigite Enter para voltar"
    #read -r -sN3 p
    printf "%s " "Press enter to continue"
    read ans
}

main() {
    while true; do
        menu_inicial        
    done
}

main "$@"
